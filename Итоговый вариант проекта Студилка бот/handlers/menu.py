#handlers/menu.py

import logging
import os
import sqlite3
from datetime import datetime
from pathlib import Path

from aiogram import types
from aiogram.filters.command import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import bold

from config.bot_config import dp
from config.test_config import TESTS_BY_YEAR


logging.basicConfig(level=logging.INFO)

BASE_DIR = Path(__file__).parent.parent
DB_DIR = BASE_DIR / "database"
DB_PATH = DB_DIR / "bot_db.sqlite"

os.makedirs(DB_DIR, exist_ok=True)


async def track_user_time(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()

        cur.execute("""
        CREATE TABLE IF NOT EXISTS user_activity (
            user_id INTEGER PRIMARY KEY,
            last_activity TIMESTAMP
        )
        """)

        current_time = datetime.now().isoformat()
        cur.execute("""
        INSERT OR REPLACE INTO user_activity (user_id, last_activity)
        VALUES (?, ?)
        """, (user_id, current_time))

        conn.commit()
        conn.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        logging.error(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
        logging.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(DB_DIR)}")
        logging.error(f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {oct(os.stat(DB_DIR).st_mode)[-3:]}")


@dp.message(CommandStart())
async def show_main_menu(message: types.Message):

    try:
        await track_user_time(message.from_user.id)

        builder = InlineKeyboardBuilder()
        builder.button(text="üìö –£—á–µ–±–Ω–∏–∫–∏", callback_data="textbooks")
        builder.button(text="üìù –¢–µ—Å—Ç—ã –ï–ì–≠", callback_data="ege_tests")
        builder.adjust(1)

        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(lambda c: c.data == "ege_tests")
async def show_subjects(callback: types.CallbackQuery):
    await callback.answer()
    await track_user_time(callback.from_user.id)

    message_text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"

    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data="subject_rus")
    builder.button(text="üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="subject_math")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith("subject_"))
async def process_subject_selection(callback: types.CallbackQuery):
    await callback.answer()
    subject = callback.data.split("_")[1]

    subject_name = TESTS_BY_YEAR[subject]["name"]
    message_text = f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {bold(subject_name)}:"

    builder = InlineKeyboardBuilder()
    for year in ["2025", "2024"]:
        builder.button(
            text=f"üìÖ {year}",
            callback_data=f"year_{subject}_{year}"
        )

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="ege_tests")
    builder.adjust(1)

    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )


@dp.callback_query(lambda c: c.data.startswith("year_"))
async def process_year_selection(callback: types.CallbackQuery):
    await callback.answer()
    _, subject, year = callback.data.split("_")

    subject_name = TESTS_BY_YEAR[subject]["name"]

    message_text = f"""üìö {bold(subject_name)} - {year} –≥–æ–¥

–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"""

    builder = InlineKeyboardBuilder()

    builder.button(
        text="üìù –í–∞—Ä–∏–∞–Ω—Ç 1",
        callback_data=f"variant_{subject}_{year}_1"
    )

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–æ–¥–∞–º", callback_data=f"subject_{subject}")
    builder.button(text="‚¨ÖÔ∏è –ö –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="ege_tests")
    builder.adjust(1)

    await callback.message.edit_text(
        message_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )

@dp.callback_query(lambda c: c.data.startswith("variant_"))
async def select_variant(callback: types.CallbackQuery):
    try:
        await callback.answer()
        _, subject, year, variant_num = callback.data.split("_")

        variant = "–í–∞—Ä–∏–∞–Ω—Ç" if subject == "rus" else "–î–µ–º–æ–≤–µ—Ä—Å–∏—è" if year == "2025" else "–í–∞—Ä–∏–∞–Ω—Ç"

        text = f"""üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

üìö –ü—Ä–µ–¥–º–µ—Ç: {bold(TESTS_BY_YEAR[subject]["name"])}
üìÖ –ì–æ–¥: {bold(year)}
üìã {bold(variant)}"""

        builder = InlineKeyboardBuilder()
        builder.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"start_test_{subject}_{year}_{variant_num}")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º", callback_data=f"year_{subject}_{year}")
        builder.adjust(1)

        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )

    except Exception as e:
        logging.error(f"Error in select_variant: {e}")


@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):

    await callback.answer()
    await track_user_time(callback.from_user.id)

    builder = InlineKeyboardBuilder()
    builder.button(text="üìö –£—á–µ–±–Ω–∏–∫–∏", callback_data="textbooks")
    builder.button(text="üìù –¢–µ—Å—Ç—ã –ï–ì–≠", callback_data="ege_tests")
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=builder.as_markup()
    )


@dp.message()
async def update_activity_message(message: types.Message):

    try:
        await track_user_time(message.from_user.id)
        logging.info(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
