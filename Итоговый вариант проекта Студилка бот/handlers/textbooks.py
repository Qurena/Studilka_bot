# handlers/textbooks.py

import logging

from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config.bot_config import dp, bot
from handlers.theory import check_group_membership


logging.basicConfig(level=logging.INFO)


GROUP_CHAT_ID = "@studilka_community"
CHANNEL_ID = "@watchyourheaad"
GROUP_LINK = "https://t.me/+ef4JOpZGsfU5OWIy"
YANDEX_DISK_LINK = "https://disk.yandex.ru/d/2Kz3UixNc3LlGA"


async def check_channel_membership(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        try:
            chat = await bot.get_chat(CHANNEL_ID)
            chat_id = chat.id
            logging.info(f"Found channel chat ID: {chat_id}")
        except Exception as e:
            logging.error(f"Error getting channel chat: {e}")
            return False

        member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        is_member = member.status in ['member', 'administrator', 'creator']
        logging.info(f"Checking channel membership for user {user_id}: {is_member} (status: {member.status})")
        return is_member
    except Exception as e:
        logging.error(f"Error checking channel membership for user {user_id}: {e}")
        return False


@dp.callback_query(lambda c: c.data == "textbooks")
async def process_textbooks(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª —É—á–µ–±–Ω–∏–∫–æ–≤"""
    try:
        await callback.answer()

        message_text = f"""üìö –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–µ–±–Ω–∏–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

1Ô∏è‚É£ –í—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É: [–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É]({GROUP_LINK})
2Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_ID}

–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø" ‚¨áÔ∏è"""

        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="check_textbooks_access")
        builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        builder.adjust(1)

        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise e


@dp.callback_query(lambda c: c.data == "check_textbooks_access")
async def check_textbooks_access(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–µ–±–Ω–∏–∫–∞–º"""
    try:
        await callback.answer()
        user_id = callback.from_user.id

        logging.info(f"Checking access for user {user_id}")

        is_group_member = await check_group_membership(user_id)
        is_channel_member = await check_channel_membership(user_id)

        logging.info(
            f"Membership check results for user {user_id}: group={is_group_member}, channel={is_channel_member}")

        if not is_group_member or not is_channel_member:
            missing_items = []
            if not is_group_member:
                missing_items.append("–≥—Ä—É–ø–ø—É")
            if not is_channel_member:
                missing_items.append("–∫–∞–Ω–∞–ª")

            message_text = f"""‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {', '.join(missing_items)}!

üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–µ–±–Ω–∏–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1Ô∏è‚É£ –í—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É: [–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É]({GROUP_LINK})
2Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {CHANNEL_ID}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø" —Å–Ω–æ–≤–∞."""

            builder = InlineKeyboardBuilder()
            builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="check_textbooks_access")
            builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            builder.adjust(1)

        else:
            message_text = f"""‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! 

üìö –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å–µ —É—á–µ–±–Ω–∏–∫–∏: [–Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫]({YANDEX_DISK_LINK})

‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""

            builder = InlineKeyboardBuilder()
            builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            builder.adjust(1)

        await callback.message.edit_text(
            message_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise e
