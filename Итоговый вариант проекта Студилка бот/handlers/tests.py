# handlers/tests.py

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile

import os
from config.bot_config import dp
from handlers.import_results import *
from states.user_states import UserState
from datetime import datetime
from data_storage import user_results, user_data_manager
from handlers.import_results import load_variant_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR: Path = Path(__file__).resolve().parent.parent


@dp.callback_query(lambda c: c.data.startswith("start_test_"))
async def start_test(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        data = callback.data.replace("start_test_", "")
        subject, year, variant_num = data.split("_")
        
        # –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–î–µ–º–æ–≤–µ—Ä—Å–∏—è", –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–í–∞—Ä–∏–∞–Ω—Ç" –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ 2024
        internal_variant = f"–î–µ–º–æ–≤–µ—Ä—Å–∏—è {variant_num}"
        display_variant = f"–í–∞—Ä–∏–∞–Ω—Ç {variant_num}" if subject == "math" and year == "2024" else internal_variant

        await state.set_state(UserState.taking_test)
        await state.update_data(
            current_question=1,
            correct_answers=0,
            subject=subject,
            year=year,
            variant=internal_variant,
            display_variant=display_variant,
            answered_questions=set(),
            user_id=callback.from_user.id
        )

        image_path = get_task_image_path(subject, year, internal_variant, 1)

        if image_path:
            await callback.message.answer(f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º {display_variant}! üöÄ")
            builder = InlineKeyboardBuilder()
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)

            photo = FSInputFile(image_path)
            await callback.message.answer_photo(
                photo=photo,
                caption="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ú–ê–õ–ï–ù–¨–ö–ò–ú–ò –ë–£–ö–í–ê–ú–ò (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)",
                reply_markup=builder.as_markup()
            )

            await callback.message.delete()
            logging.info(f"–¢–µ—Å—Ç –ø–æ {subject} –Ω–∞—á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}.")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            logging.error(f"–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {subject}, {year}, {variant_num}")

    except Exception as e:
        logging.error(f"Error in start_test: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞")

def get_task_image_path(subject: str, year: str, variant: str, task_number: int) -> str | None:
    try:
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É: "–î–µ–º–æ–≤–µ—Ä—Å–∏—è 1" -> "demo 1", "–í–∞—Ä–∏–∞–Ω—Ç 1" -> "variant 1"
        variant_key = variant.lower()
        variant_key = variant_key.replace("–¥–µ–º–æ–≤–µ—Ä—Å–∏—è ", "demo ").replace("–≤–∞—Ä–∏–∞–Ω—Ç ", "variant ")
        base_path = BASE_DIR / "assets" / "test_images" / subject / year / variant_key / "tasks"
        
        logging.info(f"–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: subject={subject}, year={year}, variant={variant}, variant_key={variant_key}")
        logging.info(f"–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π: {base_path}")

        if not base_path.exists():
            logging.error(f"Directory does not exist: {base_path}")
            return None

        # –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞
        file_suffix = "demo1" if "demo" in variant_key else "variant1"
        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Å—É—Ñ—Ñ–∏–∫—Å —Ñ–∞–π–ª–∞: {file_suffix}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PNG
        png_path = base_path / f"task{task_number}_{file_suffix}.png"
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ PNG: {png_path}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {png_path.exists()}")
        if png_path.exists():
            return str(png_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JPG
        jpg_path = base_path / f"task{task_number}_{file_suffix}.jpg"
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ JPG: {jpg_path}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {jpg_path.exists()}")
        if jpg_path.exists():
            return str(jpg_path)

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–æ –¥—Ä—É–≥–∏–º —à–∞–±–ª–æ–Ω–∞–º
        possible_names = [
            f"task{task_number}_demo1.png",
            f"task{task_number}_demo1.jpg",
            f"task{task_number}_variant1.png",
            f"task{task_number}_variant1.jpg",
            f"task{task_number}.png",
            f"task{task_number}.jpg"
        ]
        
        for name in possible_names:
            test_path = base_path / name
            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏: {test_path}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {test_path.exists()}")
            if test_path.exists():
                logging.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –∏–º–µ–Ω–∏: {test_path}")
                return str(test_path)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            files_in_dir = list(base_path.glob('*.*'))
            logging.info(f"–§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {base_path}: {[f.name for f in files_in_dir]}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        
        logging.error(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {base_path}")
        return None
    except Exception as e:
        logging.error(f"Error in get_task_image_path: {e}", exc_info=True)
        return None

@dp.message()
async def process_test_answer(message: types.Message, state: FSMContext):
    try:
        if await state.get_state() == UserState.taking_test:
            data = await state.get_data()
            current_question = data.get("current_question", 1)
            answered_questions = data.get("answered_questions", set())
            subject = data.get("subject")
            year = data.get("year")

            # --- math –ø–æ–¥–ø—É–Ω–∫—Ç—ã ---
            if subject == "math" and isinstance(current_question, tuple):
                qnum, sub = current_question
                if (qnum, sub) in answered_questions:
                    await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–æ–¥–ø—É–Ω–∫—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∏–∂–µ.")
                    return
                builder = InlineKeyboardBuilder()
                variant_data = load_variant_data(subject, year)
                is_last = (qnum == 19 and sub == 'c')
                if is_last:
                    builder.button(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="end_test")
                    await state.update_data(full_complete=True)
                else:
                    next_question = qnum + 1 if sub == list(variant_data[qnum].keys())[-1] else qnum
                    builder.button(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"next_task_{next_question}")
                    builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
                builder.adjust(1)
                user_answer = message.text.lower().strip()
                answered_questions.add((qnum, sub))
                await state.update_data(answered_questions=answered_questions)
                answer_data = variant_data[qnum][sub]
                correct_answer = answer_data["correct"]
                is_correct = user_answer == correct_answer
                await send_answer(is_correct, correct_answer, answer_data["explanation"], message, builder, year, subject)
                if is_correct:
                    await state.update_data(correct_answers=data.get("correct_answers", 0) + 1)
                return

            # --- –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ---
            if current_question in answered_questions:
                await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∏–∂–µ.")
                return

            builder = InlineKeyboardBuilder()
            is_last = (subject == "rus" and current_question == 26) or (subject == "math" and current_question == 19)
            if is_last:
                builder.button(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="end_test")
                await state.update_data(full_complete=True)
            else:
                next_question = current_question + 1
                builder.button(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"next_task_{next_question}")
                builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)

            user_answer = message.text.lower().strip()
            answered_questions.add(current_question)
            await state.update_data(answered_questions=answered_questions)

            variant_data = load_variant_data(subject, year)

            if current_question in variant_data:
                answer_data = variant_data[current_question]
                if 'correct' not in answer_data:
                    return
                correct_answer = answer_data["correct"]

                if answer_data["type"] == "numbers":
                    user_answer = "".join(user_answer.split())
                    is_correct = user_answer == correct_answer
                else:
                    is_correct = user_answer == correct_answer

                await send_answer(is_correct, correct_answer, answer_data["explanation"], message, builder, year, subject)

                if is_correct:
                    await state.update_data(correct_answers=data.get("correct_answers", 0) + 1)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def send_answer(
    is_correct: bool,
    correct_answer: str,
    explanation: str,
    message,
    builder,
    year: str,
    subject: str
):
    from pathlib import Path
    if subject == "math":
        BASE_DIR = Path(__file__).resolve().parent.parent
        photo_path = BASE_DIR / f"assets/test_images/math/{year}/demo 1/explanations/{explanation}"
        caption = (
            f"{'‚úÖ –í–µ—Ä–Ω–æ!' if is_correct else '‚ùå –ù–µ–≤–µ—Ä–Ω–æ.'}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n"
            f"–°–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∏–∂–µ:"
        )
        try:
            await message.answer_photo(
                FSInputFile(str(photo_path)),
                caption=caption,
                reply_markup=builder.as_markup()
            )
        except Exception:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è.")
    else:
        caption = (
            f"{'‚úÖ –í–µ—Ä–Ω–æ!' if is_correct else '‚ùå –ù–µ–≤–µ—Ä–Ω–æ.'}\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n"
            f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation}"
        )
        await message.answer(caption, reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data.startswith("math_subtask_"))
async def show_math_subtask(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        _, _, qnum, sub = callback.data.split("_")
        qnum = int(qnum)
        data = await state.get_data()
        subject = data.get("subject")
        year = data.get("year")
        internal_variant = data.get("variant")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_path = get_task_image_path(subject, year, internal_variant, qnum)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not image_path:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {qnum} (–ø–æ–¥–ø—É–Ω–∫—Ç {sub})")
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", callback_data=f"next_task_{qnum+1}")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                f"‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {qnum} (–ø–æ–¥–ø—É–Ω–∫—Ç {sub}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.",
                reply_markup=builder.as_markup()
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        file_size = Path(image_path).stat().st_size
        if file_size == 0:
            logging.error(f"–§–∞–π–ª {image_path} –ø—É—Å—Ç–æ–π (0 –±–∞–π—Ç). –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", callback_data=f"next_task_{qnum+1}")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                f"‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {qnum} (–ø–æ–¥–ø—É–Ω–∫—Ç {sub}) –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.",
                reply_markup=builder.as_markup()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        variant_data = load_variant_data(subject, year)
        if not variant_data or qnum not in variant_data or sub not in variant_data[qnum]:
            logging.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {qnum} (–ø–æ–¥–ø—É–Ω–∫—Ç {sub}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", callback_data=f"next_task_{qnum+1}")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                f"‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {qnum} (–ø–æ–¥–ø—É–Ω–∫—Ç {sub}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.",
                reply_markup=builder.as_markup()
            )
            return
            
        task_data = variant_data.get(qnum, {})
        sub_data = task_data.get(sub, {})
        options_builder = InlineKeyboardBuilder()
        for opt in sub_data.get("options", []):
            options_builder.button(
                text=opt,
                callback_data=f"answer_option_{qnum}_{sub}_{opt}"
            )
        options_builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
        options_builder.adjust(1)
        
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
        photo=photo,
        caption=sub_data.get("hint", f"–ü—É–Ω–∫—Ç {sub} ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç"),
        reply_markup=options_builder.as_markup()
        )
        await state.update_data(current_question=(qnum, sub))
        try:
            await callback.message.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {qnum} (–ø–æ–¥–ø—É–Ω–∫—Ç {sub}): {e}")
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", callback_data=f"next_task_{qnum+1}")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                f"‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è {qnum} (–ø–æ–¥–ø—É–Ω–∫—Ç {sub}).\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.",
                reply_markup=builder.as_markup()
            )
    except Exception as e:
        logging.error(f"Error in show_math_subtask: {e}", exc_info=True)
        try:
            _, _, qnum, _ = callback.data.split("_")
            qnum = int(qnum)
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", callback_data=f"next_task_{qnum+1}")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.",
                reply_markup=builder.as_markup()
            )
        except Exception as e2:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {e2}")
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")


@dp.callback_query(lambda c: c.data.startswith("next_task_"))
async def show_next_task(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        data = await state.get_data()
        subject = data.get("subject")
        year = data.get("year")
        internal_variant = data.get("variant")
        next_question = int(callback.data.split("_")[2])

        logging.info(
            f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é: {next_question}, subject={subject}, year={year}, variant={internal_variant}")

        max_tasks = 19 if subject == "math" else 26
        if next_question > max_tasks:
            await end_test(callback.message, state, is_early_end=False)
            return

        # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è 13
        if next_question == 13 and subject == "math":
            builder = InlineKeyboardBuilder()
            builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 13–∞", callback_data="math_subtask_13_a")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                "–ó–∞–¥–∞–Ω–∏–µ 13 —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä–≤–æ–º—É –ø–æ–¥–ø—É–Ω–∫—Ç—É.",
                reply_markup=builder.as_markup()
            )
            return

        # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è 19
        if next_question == 19 and subject == "math":
            builder = InlineKeyboardBuilder()
            builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –∞", callback_data="math_subtask_19_a")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                "–ó–∞–¥–∞–Ω–∏–µ 19 —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä–≤–æ–º—É –ø–æ–¥–ø—É–Ω–∫—Ç—É.",
                reply_markup=builder.as_markup()
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        image_path = get_task_image_path(subject, year, internal_variant, next_question)
        variant_data = load_variant_data(subject, year)
        task_data = variant_data.get(next_question, {}) if variant_data else {}

        # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è hint
        hint = "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (options)
        if "options" in task_data:
            options_builder = InlineKeyboardBuilder()
            for opt in task_data["options"]:
                options_builder.button(
                    text=opt,
                    callback_data=f"answer_option_{next_question}_{opt}"
                )
            options_builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            options_builder.adjust(1)
            try:
                photo = FSInputFile(image_path)
                await callback.message.answer_photo(
                    photo=photo,
                    caption=task_data.get("hint", hint),
                    reply_markup=options_builder.as_markup()
                )
                await state.update_data(current_question=next_question)
                try:
                    await callback.message.delete()
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                builder = InlineKeyboardBuilder()
                builder.button(text="‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", callback_data=f"next_task_{next_question + 1}")
                builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
                builder.adjust(1)
                await callback.message.answer(
                    f"‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è {next_question}.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.",
                    reply_markup=builder.as_markup()
                )
            return

        # –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        builder = InlineKeyboardBuilder()
        builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
        builder.adjust(1)
        hint = task_data.get("hint", hint)  # –µ—Å–ª–∏ –µ—Å—Ç—å, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º

        try:
            photo = FSInputFile(image_path)
            await callback.message.answer_photo(
                photo=photo,
                caption=hint,
                reply_markup=builder.as_markup()
            )
            await state.update_data(current_question=next_question)
            try:
                await callback.message.delete()
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            builder = InlineKeyboardBuilder()
            builder.button(text="‚ñ∂Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", callback_data=f"next_task_{next_question + 1}")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                f"‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è {next_question}.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç.",
                reply_markup=builder.as_markup()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_next_task: {e}")


@dp.callback_query(lambda c: c.data.startswith("answer_option_13_"))
async def process_13_option_answer(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    answered_questions = data.get("answered_questions", set())
    correct_answers = data.get("correct_answers", 0)
    subject = data.get("subject")
    year = data.get("year")
    variant = data.get("variant")
    if not (subject and year and variant):
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        return
    _, _, qnum, sub, opt = callback.data.split("_")
    qnum = int(qnum)
    variant_data = load_variant_data(subject, year)
    sub_data = variant_data[qnum][sub]
    correct_answer = sub_data["correct"]

    if (qnum, sub) in answered_questions:
        await callback.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–æ–¥–ø—É–Ω–∫—Ç.")
        return
    answered_questions.add((qnum, sub))
    is_correct = opt == correct_answer
    await state.update_data(answered_questions=answered_questions)
    await state.update_data(**{f"answer_13_{sub}": opt})
    if is_correct:
        correct_answers += 1
        await state.update_data(correct_answers=correct_answers)

    state_data = await state.get_data()
    user_a = state_data.get("answer_13_a", "-")
    user_b = state_data.get("answer_13_b", "-")
    correct_a = variant_data[qnum]["a"]["correct"]
    correct_b = variant_data[qnum]["b"]["correct"]
    explanation = variant_data[qnum]["explanation"]

    if user_a != "-" and user_b != "-":
        msg = ""
        if user_a == correct_a:
            msg += f"‚úÖ –ü—É–Ω–∫—Ç –∞): –í–∞—à –æ—Ç–≤–µ—Ç: {user_a}\n"
        else:
            msg += f"‚ùå –ü—É–Ω–∫—Ç –∞): –í–∞—à –æ—Ç–≤–µ—Ç: {user_a}\n"
        msg += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_a}\n"
        if user_b == correct_b:
            msg += f"‚úÖ –ü—É–Ω–∫—Ç –±): –í–∞—à –æ—Ç–≤–µ—Ç: {user_b}\n"
        else:
            msg += f"‚ùå –ü—É–Ω–∫—Ç –±): –í–∞—à –æ—Ç–≤–µ—Ç: {user_b}\n"
        msg += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_b}\n"
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"next_task_{qnum+1}")
        builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
        builder.adjust(1)
        if subject == "math":
            from pathlib import Path
            BASE_DIR = Path(__file__).resolve().parent.parent
            photo_path = BASE_DIR / f"assets/test_images/math/{year}/demo 1/explanations/{explanation}"
            try:
                await callback.message.answer_photo(
                    FSInputFile(str(photo_path)),
                    caption=msg + "\n–†–µ—à–µ–Ω–∏–µ:",
                    reply_markup=builder.as_markup()
                )
            except Exception:
                await callback.message.answer(msg + "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è.", reply_markup=builder.as_markup())
        else:
            msg += f"\n–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation}"
            await callback.message.answer(msg, reply_markup=builder.as_markup())
    else:
        if sub == "a":
            builder = InlineKeyboardBuilder()
            builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –±", callback_data=f"math_subtask_13_b")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                f"–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø—É–Ω–∫—Ç –∞) {'‚úÖ –≤–µ—Ä–Ω—ã–π' if is_correct else '‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π'}. "
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –±.",
                reply_markup=builder.as_markup()
            )

@dp.callback_query(lambda c: c.data.startswith("answer_option_19_"))
async def process_19_option_answer(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    answered_questions = data.get("answered_questions", set())
    correct_answers = data.get("correct_answers", 0)
    subject = data.get("subject")
    year = data.get("year")
    variant = data.get("variant")
    _, _, qnum, sub, opt = callback.data.split("_")
    qnum = int(qnum)
    variant_data = load_variant_data(subject, year)
    sub_data = variant_data[qnum][sub]
    correct_answer = sub_data["correct"]

    if (qnum, sub) in answered_questions:
        await callback.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–æ–¥–ø—É–Ω–∫—Ç.")
        return
    answered_questions.add((qnum, sub))
    is_correct = opt == correct_answer
    await state.update_data(answered_questions=answered_questions)
    await state.update_data(**{f"answer_19_{sub}": opt})
    if is_correct:
        correct_answers += 1
        await state.update_data(correct_answers=correct_answers)

    if sub == "a":
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –±", callback_data=f"math_subtask_19_b")
        builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
        builder.adjust(1)
        await callback.message.answer(
            f"–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø—É–Ω–∫—Ç –∞) {'‚úÖ –≤–µ—Ä–Ω—ã–π' if is_correct else '‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π'}. "
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –±.",
            reply_markup=builder.as_markup()
        )
        return
    if sub == "b":
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –≤", callback_data=f"math_subtask_19_c")
        builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
        builder.adjust(1)
        await callback.message.answer(
            f"–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø—É–Ω–∫—Ç –±) {'‚úÖ –≤–µ—Ä–Ω—ã–π' if is_correct else '‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π'}. "
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –≤.",
            reply_markup=builder.as_markup()
        )
        return

    is_last = (qnum == 19 and sub == 'c')
    builder = InlineKeyboardBuilder()
    if is_last:
        builder.button(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="end_test")
        await state.update_data(full_complete=True)
    else:
        builder.button(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"next_task_{qnum+1}")
        builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
    builder.adjust(1)

    state_data = await state.get_data()
    user_a = state_data.get("answer_19_a", "-")
    user_b = state_data.get("answer_19_b", "-")
    user_c = state_data.get("answer_19_c", "-")
    correct_a = variant_data[qnum]["a"]["correct"]
    correct_b = variant_data[qnum]["b"]["correct"]
    correct_c = variant_data[qnum]["c"]["correct"]
    explanation = variant_data[qnum].get("explanation", "task19_demo1.jpg")

    if user_a != "-" and user_b != "-" and user_c != "-":
        msg = ""
        if user_a == correct_a:
            msg += f"‚úÖ –ü—É–Ω–∫—Ç –∞): –í–∞—à –æ—Ç–≤–µ—Ç: {user_a}\n"
        else:
            msg += f"‚ùå –ü—É–Ω–∫—Ç –∞): –í–∞—à –æ—Ç–≤–µ—Ç: {user_a}\n"
        msg += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_a}\n"
        if user_b == correct_b:
            msg += f"‚úÖ –ü—É–Ω–∫—Ç –±): –í–∞—à –æ—Ç–≤–µ—Ç: {user_b}\n"
        else:
            msg += f"‚ùå –ü—É–Ω–∫—Ç –±): –í–∞—à –æ—Ç–≤–µ—Ç: {user_b}\n"
        msg += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_b}\n"
        if user_c == correct_c:
            msg += f"‚úÖ –ü—É–Ω–∫—Ç –≤): –í–∞—à –æ—Ç–≤–µ—Ç: {user_c}\n"
        else:
            msg += f"‚ùå –ü—É–Ω–∫—Ç –≤): –í–∞—à –æ—Ç–≤–µ—Ç: {user_c}\n"
        msg += f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_c}\n"
        if subject == "math":
            from pathlib import Path
            BASE_DIR = Path(__file__).resolve().parent.parent
            explanations_dir = BASE_DIR / f"assets/test_images/math/{year}/demo 1/explanations"
            photo_path = None
            for ext in ("jpg", "png"):
                candidate = explanations_dir / f"task19.{ext}"
                if candidate.exists():
                    photo_path = candidate
                    break
            try:
                if photo_path:
                    await callback.message.answer_photo(
                        types.FSInputFile(str(photo_path)),
                        caption=msg + "\n–†–µ—à–µ–Ω–∏–µ:",
                        reply_markup=builder.as_markup()
                    )
                else:
                    await callback.message.answer(msg + "\n(–§–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)", reply_markup=builder.as_markup())
            except Exception:
                await callback.message.answer(msg + "\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è.", reply_markup=builder.as_markup())
        else:
            msg += f"\n–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation}"
            await callback.message.answer(msg, reply_markup=builder.as_markup())
        return
    else:
        if sub == "a":
            builder = InlineKeyboardBuilder()
            builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –±", callback_data=f"math_subtask_19_b")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                f"–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø—É–Ω–∫—Ç –∞) {'‚úÖ –≤–µ—Ä–Ω—ã–π' if is_correct else '‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π'}. "
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –±.",
                reply_markup=builder.as_markup()
            )
            return
        if sub == "b":
            builder = InlineKeyboardBuilder()
            builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –≤", callback_data=f"math_subtask_19_c")
            builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
            builder.adjust(1)
            await callback.message.answer(
                f"–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–¥–ø—É–Ω–∫—Ç –±) {'‚úÖ –≤–µ—Ä–Ω—ã–π' if is_correct else '‚ùå –Ω–µ–≤–µ—Ä–Ω—ã–π'}. "
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–ø—É–Ω–∫—Ç—É –≤.",
                reply_markup=builder.as_markup()
            )
            return

@dp.callback_query(lambda c: c.data.startswith("answer_option_"))
async def process_option_answer(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    subject = data.get("subject")
    year = data.get("year")
    variant = data.get("variant")
    if not (subject and year and variant):
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
        return
    current_question = data.get("current_question")
    answered_questions = data.get("answered_questions", set())
    correct_answers = data.get("correct_answers", 0)

    _, _, qnum, opt = callback.data.split("_")
    qnum = int(qnum)

    variant_data = load_variant_data(subject, year)
    answer_data = variant_data[qnum]
    correct_answer = answer_data["correct"]
    if qnum in answered_questions:
        await callback.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        return
    answered_questions.add(qnum)

    is_correct = opt == correct_answer
    is_last = (subject == "rus" and qnum == 26) or (subject == "math" and qnum == 19)
    builder = InlineKeyboardBuilder()
    if is_last:
        builder.button(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="end_test")
        await state.update_data(full_complete=True)
    else:
        builder.button(text="‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"next_task_{qnum+1}")
        builder.button(text="‚è© –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ", callback_data="end_test")
    builder.adjust(1)
    await state.update_data(answered_questions=answered_questions)
    if is_correct:
        correct_answers += 1
        await state.update_data(correct_answers=correct_answers)
    await send_answer(is_correct, correct_answer, answer_data["explanation"], callback.message, builder, year, subject)


async def update_user_stats(user_id: int) -> None:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_results = user_data_manager.get_user_results(user_id)
        
        total_tests = len(test_results)
        total_score = sum(result['score'] for result in test_results)
        avg_score = total_score / total_tests if total_tests > 0 else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        profile_data = {
            'stats': {
                'total_tests': total_tests,
                'total_score': total_score,
                'avg_score': avg_score
            }
        }
        user_data_manager.update_profile(user_id, profile_data)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def save_test_completion(user_id: int, test_id: str, correct_answers: int, 
                             total_questions: int, test_type: str = "practice") -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        test_data = {
            'test_type': test_type,
            'answers': correct_answers,
            'total_questions': total_questions,
            'completion_time': datetime.now().isoformat()
        }
        
        user_data_manager.save_test_results(
            user_id=user_id,
            test_id=test_id,
            score=correct_answers,
            max_score=total_questions,
            answers=test_data
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await update_user_stats(user_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def end_test(message: types.Message, state: FSMContext, is_early_end: bool = False) -> None:
    try:
        data = await state.get_data()
        correct_answers = data.get("correct_answers", 0)
        answered_questions = data.get("answered_questions", set())
        total_questions = len(answered_questions)
        subject = data.get("subject")
        year = data.get("year")
        internal_variant = data.get("variant")
        display_variant = data.get("display_variant", internal_variant)
        user_id = data.get("user_id")

        if not user_id:
            user_id = (
                message.chat.id if isinstance(message, types.Message)
                else message.from_user.id if hasattr(message, 'from_user')
                else None
            )

        if not user_id:
            raise ValueError("Could not determine user ID")

        await save_test_completion(
            user_id=user_id,
            test_id=f"{subject}_demo_{year}",
            correct_answers=correct_answers,
            total_questions=total_questions
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–∞–º—è—Ç–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
        if total_questions == 0:
            if subject == "math":
                total_questions = 19
            else:
                total_questions = 26

        if total_questions > 0:
            percentage = (correct_answers / total_questions * 100)
            result_text = f"""üèÅ –¢–µ—Å—Ç {display_variant} {('–∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ!' if is_early_end else '–∑–∞–≤–µ—Ä—à–µ–Ω!')}
\nüìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}\n–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {percentage:.1f}%"""
        else:
            result_text = f"""üèÅ –¢–µ—Å—Ç {display_variant} {('–∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ!' if is_early_end else '–∑–∞–≤–µ—Ä—à–µ–Ω!')}
\nüìä –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"""

        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data=f"start_test_{subject}_{year}_1")
        builder.button(text="‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–∞", callback_data=f"year_{subject}_{year}")
        builder.adjust(1)

        from pathlib import Path
        BASE_DIR = Path(__file__).resolve().parent.parent
        variant_key = "demo 1"
        files_dir = BASE_DIR / "assets" / "test_images" / subject / year / variant_key / "files"
        tasks_file = files_dir / "variant_demo1.pdf"
        keys_file = files_dir / "keys_demo1.pdf"
        files_sent = False

        if is_early_end:
            # –ü—Ä–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_text += "\n\nüì• –§–∞–π–ª—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞. –ü—Ä–æ–π–¥–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º."
            await message.answer(result_text, reply_markup=builder.as_markup())
        else:
            # –ü—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            try:
                if tasks_file.exists():
                    document = FSInputFile(str(tasks_file))
                    await message.answer_document(document=document, caption=f"üìù –í–æ—Ç —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ {display_variant}")
                    files_sent = True
                if keys_file.exists():
                    document = FSInputFile(str(keys_file))
                    await message.answer_document(document=document, caption=f"üîë –í–æ—Ç —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ {display_variant}")
                    files_sent = True
                if not files_sent:
                    await message.answer("‚ùå –§–∞–π–ª—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                await message.answer(result_text, reply_markup=builder.as_markup())
            except Exception as e:
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏.")
                await message.answer(result_text, reply_markup=builder.as_markup())

        await state.clear()
        logging.info(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {correct_answers}/{total_questions}")

    except Exception as e:
        logging.error(f"Error in end_test: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞")

@dp.callback_query(lambda c: c.data == "end_test")
async def end_test_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    try:
        await callback.answer()
        await state.update_data(user_id=callback.from_user.id)
        logging.info(f"Saving user_id to state: {callback.from_user.id}")
        data = await state.get_data()
        is_full = data.get("full_complete", False)
        await end_test(callback.message, state, is_early_end=not is_full)
    except Exception as e:
        logging.error(f"Error in end_test_handler: {e}")


@dp.callback_query(lambda c: c.data.startswith("download_"))
async def send_test_files(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    try:
        await callback.answer()
        _, file_type, subject, year = callback.data.split("_")
        variant_key = "demo 1"

        file_path = BASE_DIR / "assets" / "test_images" / subject / year / variant_key / "files"

        if file_type == "tasks":
            file_path = file_path / "variant_demo1.pdf"
            caption = "üìù –í–æ—Ç —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏"
        else:  # keys
            file_path = file_path / "keys_demo1.pdf"
            caption = "üîë –í–æ—Ç —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏"

        if file_path.exists():
            document = FSInputFile(str(file_path))
            await callback.message.answer_document(
                document=document,
                caption=caption
            )
            logging.info(f"–§–∞–π–ª {file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}.")
        else:
            await callback.message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

    except Exception as e:
        logging.error(f"Error in send_test_files: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞")

