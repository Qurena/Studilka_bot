# handlers/personal.py

from aiogram.exceptions import TelegramBadRequest

from database import get_user_activity
from keyboards.base_menu_buttons import get_base_menu_keyboard
from keyboards.base_menu_buttons import get_personal_keyboard
from .purpose import *
from .tests import end_test

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


@dp.callback_query(lambda c: c.data == "personal_account")
async def process_personal_account(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥
        test_results = user_data_manager.get_user_results(user_id)
        profile = user_data_manager.get_profile(user_id)

        total_tests = len(test_results)
        total_score = sum(result['score'] for result in test_results)
        max_possible = sum(result['max_score'] for result in test_results)

        message_text = f"""üìä –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

üèÜ –ë–∞–ª–ª—ã: {total_score}/{max_possible if max_possible > 0 else 'N/A'}
üìù –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}
üÜî –í–∞—à ID: {user_id}

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç—Å—è –ø–æ –ª—é–±—ã–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è–º —Ç–µ—Å—Ç–æ–≤"""

        keyboard = await get_personal_keyboard()

        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_personal_account: {e}")
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {str(e)}")


@dp.callback_query(lambda c: c.data == "user_stats")
async def process_user_stats(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    test_results = user_data_manager.get_user_results(user_id)

    total_correct = sum(result['score'] for result in test_results)
    total_questions = sum(result['max_score'] for result in test_results)

    subject_results = {}
    for result in test_results:
        subject = 'rus' if 'rus' in result['test_id'] else 'math'

        if subject not in subject_results:
            subject_results[subject] = {
                'total_score': 0,
                'max_score': 0,
                'attempts': 0
            }

        subject_results[subject]['total_score'] += result['score']
        subject_results[subject]['max_score'] += result['max_score']
        subject_results[subject]['attempts'] += 1

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∏ –∫–æ–ª–≤–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    avg_score = total_correct / total_questions * 100 if total_questions > 0 else 0
    wrong_answers = total_questions - total_correct if total_questions > 0 else 0

    subject_names = {
        'rus': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        'math': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    }

    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤</b>

üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {avg_score:.1f}%
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {total_correct}
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong_answers}
üìù –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(test_results)}

üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:"""

    for subj, data in subject_results.items():
        if data['max_score'] > 0:
            percent = data['total_score'] / data['max_score'] * 100
            stats_text += f"\n‚Ä¢ {subject_names.get(subj, subj)}: {data['total_score']} –∏–∑ {data['max_score']} ({percent:.1f}%)"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="personal_account")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        stats_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")


@dp.callback_query(lambda c: c.data == "user_results_menu")
async def user_results_menu(callback: types.CallbackQuery):
    await callback.answer()

    results_menu_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    builder = InlineKeyboardBuilder()
    builder.button(text="üìö –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", callback_data="user_results_rus")
    builder.button(text="üìö –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="user_results_math")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="personal_account")
    builder.adjust(1)

    await callback.message.edit_text(
        results_menu_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")


def get_back_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="user_results_menu")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)
    return builder.as_markup()


@dp.callback_query(lambda c: c.data.startswith("user_results_") and len(c.data.split("_")) == 3)
async def process_user_results(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    logging.info(f"Retrieving results for user_id: {user_id}")
    subject = callback.data.split("_")[2]

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥
    all_results = user_data_manager.get_user_results(user_id)

    subject_results = [result for result in all_results if subject in result['test_id']]
    logging.info(f"Found {len(subject_results)} results for subject {subject}")

    if not subject_results:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö.\n–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!",
            reply_markup=get_back_keyboard()
        )
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≥–æ–¥–∞–º
    years = {}
    for result in subject_results:
        year = next((y for y in ["2025", "2024"] if y in result['test_id']), "–î—Ä—É–≥–æ–π")

        if year not in years:
            years[year] = []

        years[year].append(result)

    results_text = f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ {subject.upper()}:\n\n"

    for year, year_results in sorted(years.items(), reverse=True):
        if year_results:
            best_score = max(r['score'] for r in year_results)
            max_possible = year_results[0]['max_score']  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –æ–¥–Ω–æ–≥–æ –≥–æ–¥–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ max_score
            all_scores = [r['score'] for r in year_results]

            results_text += f"üéØ –î–µ–º–æ–≤–µ—Ä—Å–∏—è {year}:\n"
            results_text += f"‚Ä¢ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score} –∏–∑ {max_possible} –±–∞–ª–ª–æ–≤\n"
            results_text += f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫: {', '.join(map(str, all_scores))}\n\n"

    if subject_results:
        avg_score = sum(r['score'] for r in subject_results) / len(subject_results)
        total_attempts = len(subject_results)

        results_text += f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        results_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {avg_score:.1f}\n"
        results_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts}"

    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="user_results_menu")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        results_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@dp.callback_query(lambda c: c.data == "finish_test")
async def finish_test_handler(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await end_test(callback.message, state, is_early_end=False)
    except Exception as e:
        logging.error(f"Error in finish_test_handler: {e}")


def format_time_hms(seconds: float) -> str:
    seconds = int(seconds)
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    if hours > 0:
        return f"{hours} —á {minutes} –º–∏–Ω {secs} —Å–µ–∫"
    elif minutes > 0:
        return f"{minutes} –º–∏–Ω {secs} —Å–µ–∫"
    else:
        return f"{secs} —Å–µ–∫"


@dp.callback_query(lambda c: c.data == "user_history")
async def process_user_history(callback: types.CallbackQuery):
    global datetime
    await callback.answer()
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥
    test_results = user_data_manager.get_user_results(user_id)
    lesson_history = user_data_manager.get_lesson_history(user_id)

    activity = get_user_activity(user_id)
    first_seen = activity.get('first_seen')
    if first_seen:
        from datetime import datetime
        first_seen_dt = datetime.fromisoformat(first_seen)
        now = datetime.now()
        total_seconds = (now - first_seen_dt).total_seconds()
        total_time_str = format_time_hms(total_seconds)
    else:
        total_time_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    sorted_results = sorted(test_results, key=lambda x: x['timestamp'], reverse=True)

    last_sessions = []

    subject_names = {
        'rus': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        'math': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    }

    for result in sorted_results[:3]:
        test_id = result['test_id']
        subject = next((name for key, name in subject_names.items() if key in test_id), '–î—Ä—É–≥–æ–µ')
        score = f"{result['score']}/{result['max_score']}"
        completion_time = result['timestamp']

        session_str = f"‚Ä¢ {subject} - {score} - {completion_time}"
        last_sessions.append(session_str)

    while len(last_sessions) < 3:
        last_sessions.append("‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    current_time = datetime.now().strftime("%H:%M:%S")

    history_text = f"""üìù <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π</b>\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {current_time}\n\n‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –±–æ—Ç–µ: {total_time_str}\n\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n{last_sessions[0]}\n{last_sessions[1]}\n{last_sessions[2]}"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_history")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="personal_account")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        history_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")


# –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫
@dp.callback_query(lambda c: c.data == "refresh_history")
async def refresh_history(callback: types.CallbackQuery):
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ!")
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–¥
    test_results = user_data_manager.get_user_results(user_id)
    lesson_history = user_data_manager.get_lesson_history(user_id)
    activity = get_user_activity(user_id)
    first_seen = activity.get('first_seen')
    if first_seen:
        from datetime import datetime
        first_seen_dt = datetime.fromisoformat(first_seen)
        now = datetime.now()
        total_seconds = (now - first_seen_dt).total_seconds()
        total_time_str = format_time_hms(total_seconds)
    else:
        total_time_str = "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    sorted_results = sorted(test_results, key=lambda x: x['timestamp'], reverse=True)

    last_sessions = []

    subject_names = {
        'rus': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
        'math': '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Å—Ç—ã
    for result in sorted_results[:3]:
        test_id = result['test_id']
        subject = next((name for key, name in subject_names.items() if key in test_id), '–î—Ä—É–≥–æ–µ')
        score = f"{result['score']}/{result['max_score']}"
        completion_time = result['timestamp']

        session_str = f"‚Ä¢ {subject} - {score} - {completion_time}"
        last_sessions.append(session_str)

    while len(last_sessions) < 3:
        last_sessions.append("‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    current_time = datetime.now().strftime("%H:%M:%S")

    history_text = f"""üìù <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π</b>\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {current_time}\n\n‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –≤ –±–æ—Ç–µ: {total_time_str}\n\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n{last_sessions[0]}\n{last_sessions[1]}\n{last_sessions[2]}"""

    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_history")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="personal_account")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)

    try:
        await callback.message.edit_text(
            history_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        logging.info(f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback.answer("–î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã!")
            logging.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.")
        else:
            raise


@dp.message(lambda message: message.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    try:
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = user_data_manager.get_profile(user_id)
        if not profile:
            profile = {}

        test_results = user_data_manager.get_user_results(user_id)
        total_tests = len(test_results)

        total_score = 0
        total_questions = 0
        subject_stats = {'rus': {'total': 0, 'correct': 0}, 'math': {'total': 0, 'correct': 0}}

        for result in test_results:
            total_score += result['score']
            total_questions += result['max_score']

            subject = 'rus' if 'rus' in result['test_id'] else 'math'
            subject_stats[subject]['total'] += result['max_score']
            subject_stats[subject]['correct'] += result['score']

        avg_score = (total_score / total_questions * 100) if total_questions > 0 else 0

        message_text = (
            "üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
            f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n"
            f"‚Ä¢ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score}/{total_questions}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {avg_score:.1f}%\n\n"
        )

        message_text += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:*\n"
        for subject, stats in subject_stats.items():
            if stats['total'] > 0:
                subject_name = "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫" if subject == 'rus' else "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
                subject_percent = (stats['correct'] / stats['total'] * 100) if stats['total'] > 0 else 0
                message_text += f"‚Ä¢ {subject_name}: {stats['correct']}/{stats['total']} ({subject_percent:.1f}%)\n"

        message_text += "\n"

        if profile.get('full_name'):
            message_text += f"üë§ *–ò–º—è:* {profile['full_name']}\n"
        if profile.get('education_level'):
            message_text += f"üéì *–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:* {profile['education_level']}\n"
        if profile.get('study_goals'):
            message_text += f"üéØ *–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è:* {profile['study_goals']}\n"

        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤", callback_data="user_results_menu")
        builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
        builder.button(text="üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π", callback_data="lesson_history")
        builder.adjust(1)

        await message.answer(
            text=message_text,
            reply_markup=builder.as_markup(),
            parse_mode="Markdown"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_base_menu_keyboard()
        )

@dp.callback_query(lambda c: c.data == "clear_user_stats")
async def clear_user_stats(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        from database import DB_PATH
        import sqlite3
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("DELETE FROM user_profile WHERE user_id = ?", (user_id,))
        cur.execute("DELETE FROM user_access WHERE user_id = ?", (user_id,))
        cur.execute("DELETE FROM test_results WHERE user_id = ?", (user_id,))
        cur.execute("DELETE FROM lesson_history WHERE user_id = ?", (user_id,))
        cur.execute("DELETE FROM user_activity WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        await callback.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã!", show_alert=True)
        from keyboards.base_menu_buttons import get_base_menu_keyboard
        await callback.message.edit_text(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω—ã.\n\n–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=await get_personal_keyboard()
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)


@dp.callback_query(lambda c: c.data == "back_to_profile")
async def back_to_profile(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
    await personal_cabinet(callback.message)
