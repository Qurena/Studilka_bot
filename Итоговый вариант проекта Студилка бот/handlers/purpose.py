#handlers/purpose.py

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import logging

from config.bot_config import dp
from data_storage import user_data_manager

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì
EXAM_DATES = {
    'math': '27.05.2025',
    'rus': '30.05.2025'
}


# –°–∫–ª–æ–Ω—è–µ–º —Å–ª–æ–≤–æ "–¥–µ–Ω—å"
def decline_days(number: int) -> str:
    if number % 100 in [11, 12, 13, 14]:
        return "–¥–Ω–µ–π"

    last_digit = number % 10
    if last_digit == 1:
        return "–¥–µ–Ω—å"
    elif last_digit in [2, 3, 4]:
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"


def calculate_days_until_exams() -> dict:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞"""
    today = datetime.now()
    days_until = {}

    for subject, date_str in EXAM_DATES.items():
        exam_date = datetime.strptime(date_str, "%d.%m.%Y")
        days_left = (exam_date - today).days
        days_left = max(0, days_left)
        days_until[subject] = {
            'days': days_left,
            'word': decline_days(days_left)
        }

    return days_until


@dp.callback_query(lambda c: c.data == "user_goals")
async def process_user_goals(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    profile = user_data_manager.get_profile(user_id)

    rus_goal_value = profile.get('rus_goal') if profile else None
    math_goal_value = profile.get('math_goal') if profile else None

    rus_goal = f"{rus_goal_value} –±–∞–ª–ª–æ–≤" if rus_goal_value not in (None, 0) else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
    math_goal = f"{math_goal_value} –±–∞–ª–ª–æ–≤" if math_goal_value not in (None, 0) else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'

    days_until = calculate_days_until_exams()

    goals_text = f"""üéØ <b>–ú–æ–∏ —Ü–µ–ª–∏</b>

üìö –¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:
‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫: {rus_goal}
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: {math_goal}

‚è≥ –í—Ä–µ–º—è –¥–æ –ï–ì–≠:
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - {days_until['math']['days']} {days_until['math']['word']}
‚Ä¢ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - {days_until['rus']['days']} {days_until['rus']['word']}"""

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –†–£–°", callback_data="set_goal_rus")
    builder.button(text="‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å –ú–ê–¢", callback_data="set_goal_math")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="personal_account")
    builder.button(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        goals_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    logging.info(f"–¶–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")


@dp.callback_query(lambda c: c.data.startswith("set_goal_"))
async def process_set_goal(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    subject = callback.data.split("_")[2]

    subject_names = {
        "rus": "—Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É",
        "math": "–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"
    }

    await state.update_data(setting_goal_for=subject)

    goal_text = f"""‚úèÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –ø–æ {subject_names[subject]}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –±–∞–ª–ª –Ω–∞ –ï–ì–≠:"""

    builder = InlineKeyboardBuilder()
    for score in [60, 70, 80, 90, 100]:
        builder.button(
            text=f"{score} –±–∞–ª–ª–æ–≤",
            callback_data=f"goal_score_{subject}_{score}"
        )
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ü–µ–ª—è–º", callback_data="user_goals")
    builder.adjust(1)

    await callback.message.edit_text(
        goal_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É —Ü–µ–ª–∏ –ø–æ {subject_names[subject]}.")


@dp.callback_query(lambda c: c.data.startswith("goal_score_"))
async def process_goal_score(callback: types.CallbackQuery):
    await callback.answer()
    _, _, subject, score = callback.data.split("_")
    user_id = callback.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –≤ –±–¥
    profile_update = {f'{subject}_goal': int(score)}
    user_data_manager.update_profile(user_id, profile_update)

    subject_names = {
        "rus": "—Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É",
        "math": "–º–∞—Ç–µ–º–∞—Ç–∏–∫–µ"
    }

    confirmation_text = f"""‚úÖ <b>–¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>

üéØ –í–∞—à–∞ —Ü–µ–ª—å –ø–æ {subject_names[subject]}: {score} –±–∞–ª–ª–æ–≤

üí™ –£–¥–∞—á–∏ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ!"""

    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ü–µ–ª—è–º", callback_data="user_goals")
    builder.button(text="‚¨ÖÔ∏è –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="personal_account")
    builder.adjust(1)

    await callback.message.edit_text(
        confirmation_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    logging.info(f"–¶–µ–ª—å –ø–æ {subject_names[subject]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {score} –±–∞–ª–ª–æ–≤.")
